{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/BNBHarvestBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx","components/UnlockButton.tsx","hooks/useTokenBalance.ts","hooks/useBnbDividends.ts","hooks/useClaim.ts"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","nonKingdomFarms","farmsConfig","filter","farm","isKingdom","kingdomFarms","a","calls","map","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","callsK","getKingdomsAddress","kingdomsABI","rawResultsK","resultsK","fetchBalances","useAllEarnings","balances","setBalance","res","resK","fetchAllBalances","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","value","lineHeight","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","BNBHarvestBalance","bnbDividends","bnbPrice","useBusdPriceFromLpSymbol","bnbRewards","amount","BIG_ZERO","bnbRewardsUSD","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","pendingTxDivs","setPendingTxDivs","balancesWithValue","balanceType","useBnbDividends","onClaim","useClaim","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","justifyContent","id","disabled","length","onClick","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cubPrice","circSupply","minus","cakeSupply","marketCap","times","prefix","CAKE_PER_BLOCK","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","FarmStakingCard","props","useAuth","login","logout","onPresentConnectModal","useWalletModal","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance","setBnbDividends","axios","get","timeout","then","result","data","catch","error","fetchBnbDividends","dispatch","useAppDispatch","bnbDividendsContract","useBnbDvividendsContract","user","nonce","signature","claim","txHash","fetchFarmUserDataAsync"],"mappings":"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","file":"static/js/10.fab281da.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress, getKingdomsAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport kingdomsABI from 'config/abi/kingdoms.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const nonKingdomFarms = farmsConfig.filter(farm => !farm.isKingdom)\n    const kingdomFarms = farmsConfig.filter(farm => farm.isKingdom)\n    const fetchBalances = async () => {\n      const calls = nonKingdomFarms.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCub',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = nonKingdomFarms.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      const callsK = kingdomFarms.map((farm) => ({\n        address: getKingdomsAddress(),\n        name: 'pendingCUB',\n        params: [farm.pid, account],\n      }))\n\n      const rawResultsK = await multicall(kingdomsABI, callsK)\n      const resultsK = kingdomFarms.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResultsK[index]) }))\n\n      setFarmsWithBalances([...results, ...resultsK])\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress, getKingdomsAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport kingdomsABI from 'config/abi/kingdoms.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const nonKingdomFarms = farmsConfig.filter(farm => !farm.isKingdom)\n    const kingdomFarms = farmsConfig.filter(farm => farm.isKingdom)\n    const fetchAllBalances = async () => {\n      const calls = nonKingdomFarms.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCub',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      const callsK = kingdomFarms.map((farm) => ({\n        address: getKingdomsAddress(),\n        name: 'pendingCUB',\n        params: [farm.pid, account],\n      }))\n\n      const resK = await multicall(kingdomsABI, callsK)\n\n      setBalance([...res, ...resK])\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nimport { useBusdPriceFromLpSymbol } from 'state/hooks'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst BNBHarvestBalance = ({ bnbDividends }) => {\n  const { account } = useWeb3React()\n  const bnbPrice = useBusdPriceFromLpSymbol('BNB-BUSD LP')\n\n  const bnbRewards = bnbDividends && bnbDividends.amount ? new BigNumber(bnbDividends.amount).div(DEFAULT_TOKEN_DECIMAL) : BIG_ZERO\n  const bnbRewardsUSD = bnbRewards ? bnbRewards.multipliedBy(bnbPrice).toNumber() : 0\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        Locked\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={bnbRewards.toNumber()} lineHeight=\"1.5\" />\n      {!bnbPrice.eq(0) && <CardBusdValue value={bnbRewardsUSD} />}\n    </Block>\n  )\n}\n\nexport default BNBHarvestBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, Flex } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport useBnbDividends from 'hooks/useBnbDividends'\nimport { useClaim} from 'hooks/useClaim'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport BNBHarvestBalance from './BNBHarvestBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cub/');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const [pendingTxDivs, setPendingTxDivs] = useState(false)\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 10000)\n\n  const bnbDividends = useBnbDividends()\n  const { onClaim } = useClaim(bnbDividends || {})\n  const bnbRewards = bnbDividends && bnbDividends.amount ? bnbDividends.amount : 0\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => {\n    const { pid, isKingdom } = farmWithBalance\n    return { pid, isKingdom }\n  }))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cub/header_logo_wide.svg\" alt=\"cub logo\" width={64} height={64} />\n        <Flex justifyContent='space-between'>\n          <div>\n            <Block>\n              <Label>{TranslateString(544, 'NBIT to Harvest')}:</Label>\n              <CakeHarvestBalance />\n            </Block>\n            <Block>\n              <Label>{TranslateString(546, 'NBIT in Wallet')}:</Label>\n              <CakeWalletBalance />\n            </Block>\n            <Actions>\n              {account ? (\n                <Button\n                  id=\"harvest-all\"\n                  disabled={balancesWithValue.length <= 0 || pendingTx}\n                  onClick={harvestAllFarms}\n                  width=\"100%\"\n                >\n                  {pendingTx\n                    ? TranslateString(548, 'Collecting NBIT')\n                    : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\n                        count: balancesWithValue.length,\n                      })}\n                </Button>\n              ) : (\n                <UnlockButton width=\"100%\" />\n              )}\n            </Actions>\n          </div>\n          <div>\n            <Block>\n              <Label>BNB Dividends <br />for Staking NBIT:</Label>\n              <BNBHarvestBalance bnbDividends={bnbDividends} />\n            </Block>\n            <Actions>\n              {account ? (\n                <Button\n                  disabled={bnbRewards === 0 || pendingTxDivs}\n                  onClick={async () => {\n                    setPendingTxDivs(true)\n                    await onClaim()\n                    setPendingTxDivs(false)\n                  }}\n                >\n                  Claim BNB\n                </Button>\n              ) : (\n                <UnlockButton width=\"100%\" />\n              )}\n            </Actions>\n          </div>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { CAKE_PER_BLOCK } from 'config'\nimport BigNumber from 'bignumber.js/bignumber'\nimport CardValue from './CardValue'\nimport { usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const cubPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = cubPrice.times(circSupply);\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'NBIT Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total NBIT Supply')}</Text>\n          {/* for next update total supply */}\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total NBIT Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New NBIT/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={CAKE_PER_BLOCK.toNumber()} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n// import { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n  const totalValue = useTotalValue();\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(762, 'Total Value Locked (TVL)')}\n        </Heading>\n        {totalValue ? (\n          <>\n            <Heading size=\"xl\">\n              <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n            </Heading>\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all Farms and Dens')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\n// import LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport TwitterCard from 'views/Home/components/TwitterCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport BridgeCard from 'views/Home/components/BridgeCard'\nimport KingdomCard from 'views/Home/components/KingdomCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/cub/neobit_banner.jpg');\n  border-radius: 25px;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/cub/neobit_banner.jpg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        {/* <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'NeoBit Protocol')}\n        </Heading>\n        <Text>{TranslateString(578, 'NeoBit Protocol on Binance Smart Chain.')}</Text> */}\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          {/* <LotteryCard /> */}\n        </Cards>\n        {/* <CTACards>\n          <EarnAPRCard />\n          <BridgeCard />\n          <KingdomCard />\n        </CTACards> */}\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport useAuth from 'hooks/useAuth'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x0b4D95fd2F9b6B1d2d3F0d65990597EE483264B1').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport axios from 'axios'\nimport useRefresh from './useRefresh'\n\nconst useBnbDividends = () => {\n  const [bnbDividends, setBnbDividends] = useState<any>()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBnbDividends = async () => {\n      const res = await axios.get(`https://bnb.fbslo.net/?address=${account}`, { timeout: 7000 }).then(result => result.data).catch(() => {\n        return { error: true }\n      })\n\n      setBnbDividends(res)\n    }\n\n    if (account) {\n      fetchBnbDividends()\n    }\n  }, [account, fastRefresh])\n\n  return bnbDividends\n}\n\nexport default useBnbDividends\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { claim } from 'utils/callHelpers'\nimport { useBnbDvividendsContract } from './useContract'\n\nexport const useClaim = (bnbDividends: any) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const bnbDividendsContract = useBnbDvividendsContract()\n  const { user = '', amount = '', nonce = '', signature = '' } = bnbDividends\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(bnbDividendsContract, account, user, amount, nonce, signature)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [dispatch, account, user, amount, nonce, signature, bnbDividendsContract])\n\n  return { onClaim: handleClaim }\n}\n\nexport default useClaim\n"],"sourceRoot":""}